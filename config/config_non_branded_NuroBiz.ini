[EXE]
S3_DEPLOY = False
SETTING_DAY = 2024-10-06
RUNNING_WEEK_DAY = 1,3,6

[SETTING]
product = NURO biz PC, aka ソニービズネットワークス PC
language = Japanese
headline_number = 15
description_number = 4
keyword_score_data = None
initial_keyword_data = ../keywords/init/nurobiz_non_brand_jp.csv
generated_keyword_data = ../keywords/gen/nurobiz_non_brand_jp.csv
rule_data = ../keywords/rule/keyword_database.txt
rejected_keyword_list = ../keywords/reject_keywords_nurobiz_non_brand_jp.txt
rejected_text_list = ../keywords/reject_text_nurobiz_non_brand_jp.txt
history_data = ./history_data/neuro_biz_category.csv
generate_keywords = True
generate_text = True
OBSERVATION_PERIOD_DAY = 30


[LLM]
MODEL = GPT-4o 
CoherenceEvaluatorModel = o3-mini
temperature = 0
#gpt-4o configuration
gpt4o_deployment_name=gpt-4o
gpt4o_openai_api_version=2024-05-01-preview
#o3-mini configuration
o3_deployment_name=o3-mini
o3_openai_api_version=2024-12-01-preview
max_attempts = 25

[KEYS]
SERPAPI_API_KEY = YOUR_SERPAPI_API_KEY
OPENAI_GPT4_API_KEY = YOUR_OPENAI_GPT4_API_KEY
OPENAI_GPT4O_API_KEY = YOUR_OPENAI_GPT4O_API_KEY
OPENAI_o3mini_API_KEY = YOUR_OPENAI_O3MINI_API_KEY
OPENAI_GPT4O_AZURE_OPENAI_ENDPOINT = https://example-azure-openai-endpoint/
OPENAI_o3mini_AZURE_OPENAI_ENDPOINT = https://example-azure-openai-endpoint/
OPENAI_EMBEDDING_API_KEY = YOUR_OPENAI_EMBEDDING_API_KEY
OPENAI_GPT4_AZURE_OPENAI_ENDPOINT = https://example-azure-openai-endpoint/
OPENAI_EMBEDDING_AZURE_OPENAI_ENDPOINT = https://example-azure-openai-endpoint/

[KEYWORD_PLANNER]
START_MONTH = 2023-06
END_MONTH   = 2024-09
GOOGLE_ACCOUNT_ID = 

[PROMPT]
text_gen_with_key=You are an Advertisment Expert that outputs diverse headlines and descriptions of {product}, which will be used in the Google AD platform.
    In the end, you need to output the following:
    1. {headline_num} different headlines in {language} as a python list with each headline being strictly below 30 characters, while not being too short. Half of the headlines should include the product or company name, and the other half should not. All outputs must only include true facts.
    2. {description_num} different advertisement descriptions in {language} as a python list with each description being strictly below 90 characters, while not being too short. Less than half of the descriptions should include the product name. All outputs must only include true facts.
    Note that a full-width character is counted as 2 characters.

    We have given you 3 tools to accomplish the task:
    1. You can use google_search to gather features of the product. Make sure to search in {language}.
    2. You can use character_counter to count the number of characters in a single sentence, while checking whether the number if over the specified limit. If the number of characters is above the limit, you must shorten the sentence. If the number of characters is severly below the limit, you must lengthen the sentence.
    3. You must use reject_word to check whether the rejected words or phrase is generated in the text. if it is included, you must remove it and regenerate that.

    You must conduct independent searches regarding the following:
    1. Multiple searches regarding the features of the given product.

    A good AD typically exhibits several of the following characteristics:
    Relevance: The AD should directly relate to the content on your website and the services or products offered. This alignment ensures that the traffic driven by the AD is qualified and likely to engage with the business.
    Search Intent: Understanding why someone would search for a particular term—whether they're looking to buy, learn, or solve a problem—is crucial. ADs that match user intent are more likely to lead to conversions.
    Catchy and True: ADs that catches the user's attention are very effective. ADs should aim to be catchy, while strictly involving only true facts.

    The final output must be in the form of a nested list, in the form of [[Headline List], [Description List]] without extra words or ''' to indicate it is a string.

    Product: {product}
    Keyword: {keyword}


[TOOL]
INPUT_RETRIEVAL_NAME = past_performance_and_setting_search
INPUT_RETRIEVAL_DISCRPTION = Search for information about past settings of google ads.
RULE_RETRIEVAL_NAME = keyword_rule_example_search
RULE_RETRIEVAL_DISCRPTION = Search for example and rule about setting keyword for google ads.
TREND_RETRIEVAL_NAME = reflection_search
TREND_RETRIEVAL_DISCRPTION = Search for reflection data for google ads.
EXAMPLER_RETRIEVAL_NAME = exampler_search
EXAMPLER_RETRIEVAL_DISCRPTION = Search for exampler data for google ads
GOOD_KW_RETRIEVAL_NAME = ad_keyword_setting
GOOD_KW_RETRIEVAL_DISCRPTION = find the current keyword setting

[KEYWORD]
GENERATION_DYNAMICS = True
SEARCH_VOLUMN_CHECK = False
MINIMUM_CONVERSIONS = 0
MAXIMUM_CPC = 25
FILTERING_KEYWORDS = False
NUM_KEYWORDS_PER_CATEGORY = 3
NUM_NEW_CATEGORIES = 1
NUM_GOOD_CATEGORIES = 3
NUM_KEYWORDS_PER_NEW_CATEGORY = 3
SEARCH_CHECK_THRESHOLD = 5
GENERATION_ROUND = 3
DROP_RATIO = 0.25
BRANDED_KEYWORD = False
BOUNDARY_TARGET_CPA = 1500

[LANG_SMITH]
LANGSMITH_TRACING=false
LANGSMITH_ENDPOINT=https://api.smith.langchain.com
LANGSMITH_API_KEY=YOUR_LANGSMITH_API_KEY
LANGSMITH_PROJECT=local-test